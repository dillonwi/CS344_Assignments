#!/bin/bash

# Function Definitions

# Prints the dimensions of the given matrix to stdout.
# If a matrix file is passed as an argument, that matrix is used.
# Otherwise, stdin is used.
getDims() {

  rows=0
  cols=0
  while IFS="$(printf '\t')" read line
  do
    rows=$(expr $rows + 1)

    # Count columns only on first iteration.
    if test $cols -eq 0
    then
      for cell in $line
      do
        cols=$(expr $cols + 1)
      done
    fi

  done < "${1:-/dev/stdin}"
  echo $rows $cols
  exit 0
}

# Adds two matrices and prints the result to stdout.
add() {

  d1=$(getDims $1)
  d2=$(getDims $2)
  tab=" "

  if test "$d1" = "$d2"
  then
    # Add matrices
    paste -d , $1 $2 | while IFS="$(printf ',')" read -r m1 m2
    do
      line="" # Initialize empty string for new matrix row.
      loc=0
      arr1=($m1)
      arr2=($m2)

      # Iterate over each number in $arr1 and add it to $arr2.
      # Then, append that number (with a tab) to the end of the current line.
      for num1 in $m1
      do
        num=$(expr ${arr1[loc]} + ${arr2[loc]})
        line="$line$num\\t"
        loc=$(expr $loc + 1)
      done
      line=${line::-2}
      echo -e $line
    done
  else
    >&2 echo "error: Matrix dimensions are not equal."
    exit 1
  fi
  exit 0
}

transpose() {

  # Empty array variable.
  declare -A arr

  # Populate 2D array with input.
  r=0
  while IFS="$(printf '\t')" read line
  do
    c=0
    for cell in $line
    do
      arr[$c, $r]=$cell
      c=$(expr $c + 1)
    done
    r=$(expr $r + 1)
  done < "${1:-/dev/stdin}"
  rows=$r
  cols=$c

  # Echo transposed array.
  for c in $( seq 0 $( expr $cols - 1 ) )
  do
    line=
    for r in $( seq 0 $( expr $rows ) )
    do
      num=${arr[$c, $r]}
      line="$line$num\\t"
    done
    line=${line::-4}
    echo -e $line
  done
  exit 0
}

#
# Preliminary Error Checking
#

# Check for more than 3 arguments (too many).
if test $# -gt 3
then
  >&2 echo "error: $# greater than 3"
  exit 2

# Check for less than 1 argument (no operation).
elif test $# -lt 1
then
  >&2 echo "error: $# less than 1"
  exit 3
fi
if test $# -gt 1
then
  # Check that files exist.
  if [ ! -f $2 ]
  then
    >&2 echo "error: First file doesn't exist."
    exit 5
  elif ! [ -r $2 ]
  then
    error "error: Please allow read file permissions for $2";
    exit 8
  fi
elif test $# -gt 2
then
  if [ ! -f $3 ]
  then
    >&2 echo "error: Second file doesn't exist."
    exit 6
  elif ! [ -r $2 ]
  then
    error "error: Please allow read file permissions for $3";
    exit 8
  fi
fi

#
# Operations that require less than 2 matrices.
#


# Get operation from terminal.
ops=$1

# Call relevant function for operation given.
if test $ops = dims
then
  # Dims can only work with 1 file at a time.
  if test $# -gt 2
  then
    >&2 echo "error: Too many matrices for dims."
    exit 7
  fi
  getDims $2
elif test $ops = transpose
then
  # Transpose can only work with 1 file at a time.
  if test $# -gt 2
  then
    >&2 echo "error: Too many matrices for transpose."
    exit 7
  fi
  transpose $2
fi


#
# Operations that require 2 matrices.
#

# Error check for operations with 2 matrices.
# Check for 3 arguments: operation matrix1 matrix.
if test $# -ne 3
then
  >&2 echo "error: $# not equal to 3"
  exit 4
fi

# More Operators.
if test $ops = mean
then
  echo mean
elif test $ops = add
then
  add $2 $3
else
  echo multiply
fi

exit 0
